// –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Firebase
import { initializeApp} from "https://www.gstatic.com/firebasejs/11.3.1/firebase-app.js";
import { getDatabase, ref, set, onValue } from "https://www.gstatic.com/firebasejs/11.3.1/firebase-database.js";

// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±–µ—Ä–∏ –∏–∑ —Å–≤–æ–µ–π –∫–æ–Ω—Å–æ–ª–∏ Firebase)
const firebaseConfig = {
apiKey: "AIzaSyBoDZITlAQRzK6D7rxOAHUMMSzXk1htu94",
authDomain: "cellsgame-f7561.firebaseapp.com",
databaseURL: "https://cellsgame-f7561-default-rtdb.firebaseio.com",  // –î–æ–±–∞–≤—å URL —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
projectId: "cellsgame-f7561",
storageBucket: "cellsgame-f7561.appspot.com",
messagingSenderId: "192058456770",
appId: "1:192058456770:web:37ee69d5e45823807dd95b",
measurementId: "G-HN8ZBPW1WP"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firebase (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
onValue(ref(db, "test/"), (snapshot) => {
    const data = snapshot.val();
    if (data) {
        console.log("üî• –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);
    } else {
        console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Firebase!");
    }
});

const grid = document.getElementById('grid');
const diceResult = document.getElementById('diceResult');
let currentWidth = 0, currentHeight = 0;
let offsetX = 0, offsetY = 0;
let rectangle = null;
let colorToggle = true; // –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
let occupiedGrid = Array(20).fill().map(() => Array(20).fill(false)); // –ó–∞–Ω—è—Ç—ã–µ –∫–ª–µ—Ç–∫–∏

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è 20x20
const cells = [];
for (let i = 0; i < 20 * 20; i++) {
    const cell = document.createElement('div');
    cell.classList.add('cell');
    cell.dataset.index = i;
    grid.appendChild(cell);
    cells.push(cell);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è 20x20
function createField() {
    for (let gridX = 0; gridX < 20; gridX++) {
        for (let gridY = 0; gridY < 20; gridY++) {
            set(ref(db, `gameField/${gridX}-${gridY}`), {

                color: 'white' // –¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }).then(() => {
                console.log(`Cell ${gridX}-${gridY} created`);
            }).catch(error => {
                console.error("Error creating cell:", error);
            });
        }
    }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
createField();

// –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
function rollDice() {
    if (rectangle && !rectangle.classList.contains('fixed')) {
        alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É!");
        return;
    }

    const [dice1, dice2] = [Math.floor(Math.random() * 6) + 1, Math.floor(Math.random() * 6) + 1];
    currentWidth = dice1;
    currentHeight = dice2;
    diceResult.textContent = `–í—ã–ø–∞–ª–æ: ${currentWidth} x ${currentHeight}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
    if (![currentWidth, currentHeight].some(w => hasSpaceForRectangle(w, w === currentWidth ? currentHeight : currentWidth))) {
        alert("–ù–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã!");
        return;
    }

    createRectangle(currentWidth, currentHeight);
}

window.rollDice = rollDice;

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
async function resetGame() {
    try {
        await set(ref(db, "gameField"), null);
        await set(ref(db, "figures"), null);
        await set(ref(db, "lastMove"), null);
        console.log("üóëÔ∏è Firebase –æ—á–∏—â–µ–Ω");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Firebase: ", error);
    }

    // –û—á–∏—Å—Ç–∫–∞ UI
    document.querySelectorAll('.rectangle').forEach(rect => rect.remove());
    occupiedGrid = Array(20).fill().map(() => Array(20).fill(false));
    diceResult.textContent = "–ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫–∏!";
    console.log("üîÑ –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!");
}

// ‚úÖ –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π
window.resetGame = resetGame;

async function getInitialColor() {
    let storedColor = localStorage.getItem("userColor");
    if (storedColor) return storedColor; // –ï—Å–ª–∏ —Ü–≤–µ—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    return new Promise((resolve) => {
        onValue(ref(db, "figures"), (snapshot) => {
            let redCount = 0;
            let blueCount = 0;

            if (snapshot.exists()) {
                const figures = snapshot.val();
                for (let key in figures) {
                    if (figures[key].color === "red") redCount++;
                    if (figures[key].color === "blue") blueCount++;
                }
            }

            let userColor = redCount === blueCount ? "blue" : "red";
            localStorage.setItem("userColor", userColor);
            resolve(userColor);
        }, { onlyOnce: true });
    });
}

async function canMakeMove(userColor) {
    return new Promise((resolve) => {
        onValue(ref(db, "lastMove"), (snapshot) => {
            let lastMoveColor = snapshot.val();
            resolve(lastMoveColor !== userColor); // –ú–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –±—ã–ª –¥—Ä—É–≥–æ–≥–æ —Ü–≤–µ—Ç–∞
        }, { onlyOnce: true });
    });
}

async function createRectangle(width, height) {
    const userColor = await getInitialColor(); // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const moveAllowed = await canMakeMove(userColor); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ö–æ–¥–∏—Ç—å

    if (!moveAllowed) {
        alert("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥! –î–æ–∂–¥–∏—Ç–µ—Å—å —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.");
        return;
    }

    rectangle = document.createElement('div');
    rectangle.classList.add('rectangle');
    updateRectangleStyle(rectangle, width, height, 120, 0, userColor === "red");

    grid.appendChild(rectangle);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ –≤ Firebase
    set(ref(db, "lastMove"), userColor);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    rectangle.addEventListener('mousedown', startDragCommon);
    document.addEventListener('mouseup', stopDragCommon);
    document.addEventListener('mousemove', dragCommon);

    rectangle.addEventListener('touchstart', startDragCommon);
    document.addEventListener('touchend', stopDragCommon);
    document.addEventListener('touchmove', dragCommon);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è
    document.getElementById("rotateButton").addEventListener("click", rotateRectangle);
}


window.createRectangle = createRectangle;

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
function updateRectangleStyle(rectangle, width, height, left, top, colorToggle) {
    rectangle.style.width = `${width * 20-4}px`;
    rectangle.style.height = `${height * 20-4}px`;
    rectangle.style.left = `${left}px`;
    rectangle.style.top = `${top}px`;
    rectangle.style.backgroundColor = colorToggle ? '#0307ff81' : '#ff000081';
    rectangle.style.borderColor = colorToggle ? 'darkblue' : 'darkred';
}

// –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –¥–ª—è –º—ã—à–∏ –∏ —Ç–∞—á—Å–∫—Ä–∏–Ω–æ–≤)
let activeRectangle = null;
function startDragCommon(event) {
    let target = event.target.closest('.rectangle');
    if (!target || target.classList.contains('fixed')) return;

    activeRectangle = target;
    let rect = target.getBoundingClientRect();
    offsetX = (event.clientX || event.touches[0].clientX) - rect.left;
    offsetY = (event.clientY || event.touches[0].clientY) - rect.top;

    activeRectangle.style.position = 'absolute';
    activeRectangle.style.zIndex = '1000'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π z-index, —á—Ç–æ–±—ã —Ñ–∏–≥—É—Ä–∞ –±—ã–ª–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö
}

function dragCommon(event) {
    if (!activeRectangle) return;

    let x = (event.clientX || event.touches[0].clientX) - offsetX;
    let y = (event.clientY || event.touches[0].clientY) - offsetY;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ grid
    let gridRect = grid.getBoundingClientRect();

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º x –∏ y, —á—Ç–æ–±—ã —Ñ–∏–≥—É—Ä–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã grid
    x = Math.max(gridRect.left, Math.min(x, gridRect.right - activeRectangle.offsetWidth));
    y = Math.max(gridRect.top, Math.min(y, gridRect.bottom - activeRectangle.offsetHeight));

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∞–º–æ–π —Å–µ—Ç–∫–∏
    x -= gridRect.left;
    y -= gridRect.top;

    activeRectangle.style.left = `${x}px`;
    activeRectangle.style.top = `${y}px`;
}

function stopDragCommon() {
    if (!activeRectangle) return;

    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∏–≥—É—Ä—É
    snapToGrid();

    // –í–µ—Ä–Ω—É—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π z-index –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    activeRectangle.style.zIndex = '';

    activeRectangle = null;
}



// –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–≥—É—Ä—ã
function snapToGrid() {
    let left = parseInt(rectangle.style.left);
    let top = parseInt(rectangle.style.top);
    let gridX = Math.round(left / 20);
    let gridY = Math.round(top / 20);

    rectangle.style.left = `${gridX * 20 + 3}px`;
    rectangle.style.top = `${gridY * 20 + 3}px`;

    if (!canPlaceRectangle(gridX, gridY, currentWidth, currentHeight)) {
        alert("–ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ñ–∏–≥—É—Ä—É –∑–¥–µ—Å—å!");
        return;
    }
    
    
    let confirmButton = null;
    function butConfirm(){
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmButton = document.createElement("button");
        confirmButton.innerText = "‚úî";
        confirmButton.classList.add("confirm-button");

        // –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ —Ñ–∏–≥—É—Ä—ã
        confirmButton.style.position = "absolute";
        confirmButton.style.left = `${rectangle.clientWidth / 2 - 10}px`;
        confirmButton.style.top = `${rectangle.clientHeight / 2 - 10}px`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ñ–∏–≥—É—Ä—É
        rectangle.appendChild(confirmButton);
    }

    butConfirm();

    // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Ñ–∏–≥—É—Ä–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è
    confirmButton.addEventListener("click", () => {
        rectangle.classList.add('fixed');
        rectangle.style.cursor = 'default';
        markOccupiedCells(gridX, gridY, currentWidth, currentHeight);
        confirmButton.remove(); // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
        set(ref(db, `figures/${gridX}-${gridY}`), {
            x: gridX,
            y: gridY,
            width: currentWidth,
            height: currentHeight,
            color: colorToggle ? 'red' : 'blue'
        })
        .then(() => console.log("‚úÖ –§–∏–≥—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firebase"))
        .catch((error) => console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase: ", error));
    });
};

onValue(ref(db, "gameField"), (snapshot) => {
    try {
        if (!snapshot.exists()) {
            console.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ gameField –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            return;
        }

        const field = snapshot.val();
        const grid = document.getElementById("grid");

        grid.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π

        for (let key in field) {
            const { x, y, width, height, color } = field[key];

            let cell = document.createElement('div');
            cell.classList.add('cell');
            cell.style.backgroundColor = color;
            cell.style.border = "1px solid #aaa";

            grid.appendChild(cell);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ onValue (gameField):", error);
    }

    // –¢–µ–ø–µ—Ä—å —Å–ª—É—à–∞–µ–º "figures" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞ –ø–æ–ª–µ
    onValue(ref(db, "figures"), (snapshot) => {
        try {
            if (!snapshot.exists()) {
                console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ figures.");
                return;
            }
            
            const figures = snapshot.val();
            console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ figures:", figures);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        }

        const figures = snapshot.val();
        let redCount = 0;
        let blueCount = 0;
                const redCounter = document.getElementById("red");
        const blueCounter = document.getElementById("blue");
        for (let key in figures) {
            const { x, y, width, height, color } = figures[key];

            let newRect = document.createElement('div');
            newRect.classList.add('rectangle', 'fixed');
            newRect.style.width = `${width * 20 - 5}px`;
            newRect.style.height = `${height * 20 - 5}px`;
            newRect.style.left = `${x * 20 + 3}px`;
            newRect.style.top = `${y * 20 + 3}px`;
            newRect.style.backgroundColor = color;
            newRect.style.cursor = 'default';

            if (color === "red") redCount+= width*height;
            if (color === "blue") blueCount+= width*height;

            grid.appendChild(newRect);
        }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—á—ë—Ç—á–∏–∫–æ–≤
        redCounter.innerText = `–ö—Ä–∞—Å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫: ${redCount}`;
        blueCounter.innerText = `–°–∏–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫: ${blueCount}`;
    });
});


// –ü–æ–≤–æ—Ä–æ—Ç —Ñ–∏–≥—É—Ä—ã
function rotateRectangle() {
    if (!rectangle || rectangle.classList.contains("fixed")) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const oldConfirmButton = rectangle.querySelector(".confirm-button");
    if (oldConfirmButton) {
        oldConfirmButton.remove();
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    let width = rectangle.clientWidth;
    let height = rectangle.clientHeight;

    // –ú–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –º–µ—Å—Ç–∞–º–∏
    rectangle.style.width = `${height}px`;
    rectangle.style.height = `${width}px`;

    currentWidth = Math.round(height / 20);
    currentHeight = Math.round(width / 20);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    butConfirm();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–≥—É—Ä—É
function canPlaceRectangle(gridX, gridY, width, height) {
    return !(gridX < 0 || gridY < 0 || gridX + width > 20 || gridY + height > 20 ||
        Array.from({ length: height }, (_, i) =>
            Array.from({ length: width }, (_, j) => occupiedGrid[gridY + i][gridX + j])
        ).some(row => row.some(cell => cell))
    );
}


// –ü–æ–º–µ—á–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–µ
function markOccupiedCells(gridX, gridY, width, height) {
    for (let i = 0; i < height; i++) {
        for (let j = 0; j < width; j++) {
            occupiedGrid[gridY + i][gridX + j] = true;
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
function hasSpaceForRectangle(width, height) {
    console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è:", width, "x", height);
    for (let y = 0; y <= 20 - height; y++) {
        for (let x = 0; x <= 20 - width; x++) {
            if (canPlaceRectangle(x, y, width, height)) {
                console.log("–ù–∞—à–ª–∏ –º–µ—Å—Ç–æ:", x, y);
                return true;
            }
        }
    }
    console.log("–ú–µ—Å—Ç–∞ –Ω–µ—Ç");
    return false;
}